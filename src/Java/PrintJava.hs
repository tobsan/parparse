{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintJava where

-- pretty-printer generated by the BNF converter

import AbsJava
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: [a] -> Doc
  prtList = concatD . map (prt 0)

instance Print a => Print [a] where
  prt _ = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))
  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ".") , prt 0 xs])


instance Print Unsigned where
  prt _ (Unsigned i) = doc (showString ( i))


instance Print Long where
  prt _ (Long i) = doc (showString ( i))


instance Print UnsignedLong where
  prt _ (UnsignedLong i) = doc (showString ( i))


instance Print Hexadecimal where
  prt _ (Hexadecimal i) = doc (showString ( i))


instance Print HexUnsigned where
  prt _ (HexUnsigned i) = doc (showString ( i))


instance Print HexLong where
  prt _ (HexLong i) = doc (showString ( i))


instance Print HexUnsLong where
  prt _ (HexUnsLong i) = doc (showString ( i))


instance Print Octal where
  prt _ (Octal i) = doc (showString ( i))


instance Print OctalUnsigned where
  prt _ (OctalUnsigned i) = doc (showString ( i))


instance Print OctalLong where
  prt _ (OctalLong i) = doc (showString ( i))


instance Print OctalUnsLong where
  prt _ (OctalUnsLong i) = doc (showString ( i))


instance Print JDouble where
  prt _ (JDouble i) = doc (showString ( i))


instance Print JFloat where
  prt _ (JFloat i) = doc (showString ( i))


instance Print JLongDouble where
  prt _ (JLongDouble i) = doc (showString ( i))


instance Print UnicodeChar where
  prt _ (UnicodeChar i) = doc (showString ( i))


instance Print JChar where
  prt _ (JChar i) = doc (showString ( i))



instance Print ProgramFile where
  prt i e = case e of
   Prpkg ids semis imports typedecls -> prPrec i 0 (concatD [doc (showString "package") , prt 0 ids , prt 0 semis , prt 0 imports , prt 0 typedecls])
   ProgF imports typedecls -> prPrec i 0 (concatD [prt 0 imports , prt 0 typedecls])


instance Print Import where
  prt i e = case e of
   ImportN ids semis -> prPrec i 0 (concatD [doc (showString "import") , prt 0 ids , prt 0 semis])
   ImportA ids semis -> prPrec i 0 (concatD [doc (showString "import") , prt 0 ids , doc (showString ".*") , prt 0 semis])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print TypeDecl where
  prt i e = case e of
   TypeDecl classheader fielddeclarations -> prPrec i 0 (concatD [prt 0 classheader , doc (showString "{") , prt 0 fielddeclarations , doc (showString "}")])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print ClassHeader where
  prt i e = case e of
   ClassDec modifiers id -> prPrec i 0 (concatD [prt 0 modifiers , doc (showString "class") , prt 0 id])
   ClassDecE modifiers id typenames -> prPrec i 0 (concatD [prt 0 modifiers , doc (showString "class") , prt 0 id , doc (showString "extends") , prt 0 typenames])
   ClassDecI modifiers id typenames -> prPrec i 0 (concatD [prt 0 modifiers , doc (showString "class") , prt 0 id , doc (showString "implements") , prt 0 typenames])
   ClassDecEI modifiers id typenames0 typenames -> prPrec i 0 (concatD [prt 0 modifiers , doc (showString "class") , prt 0 id , doc (showString "extends") , prt 0 typenames0 , doc (showString "implements") , prt 0 typenames])
   InterDec modifiers id -> prPrec i 0 (concatD [prt 0 modifiers , doc (showString "interface") , prt 0 id])
   InterDecE modifiers id typenames -> prPrec i 0 (concatD [prt 0 modifiers , doc (showString "interface") , prt 0 id , doc (showString "extends") , prt 0 typenames])
   InterDecI modifiers id typenames -> prPrec i 0 (concatD [prt 0 modifiers , doc (showString "interface") , prt 0 id , doc (showString "implements") , prt 0 typenames])
   InterDecEI modifiers id typenames0 typenames -> prPrec i 0 (concatD [prt 0 modifiers , doc (showString "interface") , prt 0 id , doc (showString "extends") , prt 0 typenames0 , doc (showString "implements") , prt 0 typenames])


instance Print FieldDeclaration where
  prt i e = case e of
   Dvar modifiers typespec vardecls -> prPrec i 0 (concatD [prt 0 modifiers , prt 0 typespec , prt 0 vardecls , doc (showString ";")])
   Dmth modifiers typespec methoddecl methodbody -> prPrec i 0 (concatD [prt 0 modifiers , prt 0 typespec , prt 0 methoddecl , prt 0 methodbody])
   Dmthth modifiers typespec methoddecl typenames methodbody -> prPrec i 0 (concatD [prt 0 modifiers , prt 0 typespec , prt 0 methoddecl , doc (showString "throws") , prt 0 typenames , prt 0 methodbody])
   Dconst modifiers id parameters body -> prPrec i 0 (concatD [prt 0 modifiers , prt 0 id , doc (showString "(") , prt 0 parameters , doc (showString ")") , prt 0 body])
   Dconstt modifiers id parameters typenames body -> prPrec i 0 (concatD [prt 0 modifiers , prt 0 id , doc (showString "(") , prt 0 parameters , doc (showString ")") , doc (showString "throws") , prt 0 typenames , prt 0 body])
   Dblk body -> prPrec i 0 (concatD [prt 0 body])
   Dinnerclass typedecl -> prPrec i 0 (concatD [prt 0 typedecl])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print MethodBody where
  prt i e = case e of
   IBody  -> prPrec i 0 (concatD [doc (showString ";")])
   MBody body -> prPrec i 0 (concatD [prt 0 body])


instance Print LVarStatement where
  prt i e = case e of
   LVar typespec vardecls -> prPrec i 0 (concatD [prt 0 typespec , prt 0 vardecls , doc (showString ";")])
   LVarf typespec vardecls -> prPrec i 0 (concatD [doc (showString "final") , prt 0 typespec , prt 0 vardecls , doc (showString ";")])
   Statem stm -> prPrec i 0 (concatD [prt 0 stm])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print Body where
  prt i e = case e of
   Body lvarstatements -> prPrec i 0 (concatD [doc (showString "{") , prt 0 lvarstatements , doc (showString "}")])


instance Print Stm where
  prt i e = case e of
   Sem  -> prPrec i 0 (concatD [doc (showString ";")])
   Lbl id -> prPrec i 0 (concatD [prt 0 id , doc (showString ":")])
   Case exp -> prPrec i 0 (concatD [doc (showString "case") , prt 0 exp , doc (showString ":")])
   Dflt  -> prPrec i 0 (concatD [doc (showString "default") , doc (showString ":")])
   Exps exp -> prPrec i 0 (concatD [prt 0 exp , doc (showString ";")])
   LV lvarstatements -> prPrec i 0 (concatD [doc (showString "{") , prt 0 lvarstatements , doc (showString "}")])
   Jmp jumpstm -> prPrec i 0 (concatD [prt 0 jumpstm])
   Grd guardstm -> prPrec i 0 (concatD [prt 0 guardstm])
   Iter iterstm -> prPrec i 0 (concatD [prt 0 iterstm])
   Sel selectionstm -> prPrec i 0 (concatD [prt 0 selectionstm])


instance Print DeclaratorName where
  prt i e = case e of
   DeclName id -> prPrec i 0 (concatD [prt 0 id])
   DeclArray id bracketsopts -> prPrec i 0 (concatD [prt 0 id , prt 0 bracketsopts])


instance Print VarDecl where
  prt i e = case e of
   VDeclAssign declaratorname variableinits -> prPrec i 0 (concatD [prt 0 declaratorname , doc (showString "=") , prt 0 variableinits])
   VDecl id -> prPrec i 0 (concatD [prt 0 id])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print VariableInits where
  prt i e = case e of
   IExp exp -> prPrec i 0 (concatD [prt 0 exp])
   IEmpt  -> prPrec i 0 (concatD [doc (showString "{") , doc (showString "}")])
   IArri arrayinits -> prPrec i 0 (concatD [doc (showString "{") , prt 0 arrayinits , doc (showString "}")])


instance Print ArrayInits where
  prt i e = case e of
   Vainit variableinits -> prPrec i 0 (concatD [prt 0 variableinits])
   Vai arrayinits variableinits -> prPrec i 0 (concatD [prt 0 arrayinits , doc (showString ",") , prt 0 variableinits])
   Vais arrayinits -> prPrec i 0 (concatD [prt 0 arrayinits , doc (showString ",")])


instance Print MethodDecl where
  prt i e = case e of
   Mth declaratorname parameters -> prPrec i 0 (concatD [prt 0 declaratorname , doc (showString "(") , prt 0 parameters , doc (showString ")")])
   MthdArr methoddecl bracketsopt -> prPrec i 0 (concatD [prt 0 methoddecl , prt 0 bracketsopt])


instance Print Parameter where
  prt i e = case e of
   Param typespec declaratorname -> prPrec i 0 (concatD [prt 0 typespec , prt 0 declaratorname])
   Pfinal typespec declaratorname -> prPrec i 0 (concatD [doc (showString "final") , prt 0 typespec , prt 0 declaratorname])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print SelectionStm where
  prt i e = case e of
   Ifone exp stm elseifs -> prPrec i 0 (concatD [doc (showString "if") , doc (showString "(") , prt 0 exp , doc (showString ")") , prt 0 stm , prt 0 elseifs])
   If exp stm0 elseifs stm -> prPrec i 0 (concatD [doc (showString "if") , doc (showString "(") , prt 0 exp , doc (showString ")") , prt 0 stm0 , prt 0 elseifs , doc (showString "else") , prt 0 stm])
   Switch exp body -> prPrec i 0 (concatD [doc (showString "switch") , doc (showString "(") , prt 0 exp , doc (showString ")") , prt 0 body])


instance Print Elseif where
  prt i e = case e of
   Elseif exp stm -> prPrec i 0 (concatD [doc (showString "else if") , doc (showString "(") , prt 0 exp , doc (showString ")") , prt 0 stm])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print JumpStm where
  prt i e = case e of
   Break  -> prPrec i 0 (concatD [doc (showString "break") , doc (showString ";")])
   Brlabel id -> prPrec i 0 (concatD [doc (showString "break") , prt 0 id , doc (showString ";")])
   Continue  -> prPrec i 0 (concatD [doc (showString "continue") , doc (showString ";")])
   Continuelabel id -> prPrec i 0 (concatD [doc (showString "continue") , prt 0 id , doc (showString ";")])
   Return  -> prPrec i 0 (concatD [doc (showString "return") , doc (showString ";")])
   ReturnExp exp -> prPrec i 0 (concatD [doc (showString "return") , prt 0 exp , doc (showString ";")])
   Throw exp -> prPrec i 0 (concatD [doc (showString "throw") , prt 0 exp , doc (showString ";")])


instance Print GuardStm where
  prt i e = case e of
   Synchronized exp body -> prPrec i 0 (concatD [doc (showString "synchronized") , doc (showString "(") , prt 0 exp , doc (showString ")") , prt 0 body])
   Try body catchs -> prPrec i 0 (concatD [doc (showString "try") , prt 0 body , prt 0 catchs])
   Tryfinally body0 catchs body -> prPrec i 0 (concatD [doc (showString "try") , prt 0 body0 , prt 0 catchs , doc (showString "finally") , prt 0 body])


instance Print Catch where
  prt i e = case e of
   Catch1 typespec id body -> prPrec i 0 (concatD [doc (showString "catch") , doc (showString "(") , prt 0 typespec , prt 0 id , doc (showString ")") , prt 0 body])
   Catch2 typespec body -> prPrec i 0 (concatD [doc (showString "catch") , doc (showString "(") , prt 0 typespec , doc (showString ")") , prt 0 body])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print IterStm where
  prt i e = case e of
   While exp stm -> prPrec i 0 (concatD [doc (showString "while") , doc (showString "(") , prt 0 exp , doc (showString ")") , prt 0 stm])
   Do stm exp -> prPrec i 0 (concatD [doc (showString "do") , prt 0 stm , doc (showString "while") , doc (showString "(") , prt 0 exp , doc (showString ")")])
   For forinit exps0 exps stm -> prPrec i 0 (concatD [doc (showString "for") , doc (showString "(") , prt 0 forinit , prt 0 exps0 , doc (showString ";") , prt 0 exps , doc (showString ")") , prt 0 stm])


instance Print ForInit where
  prt i e = case e of
   Exprs1 exps -> prPrec i 0 (concatD [prt 0 exps , doc (showString ";")])
   DVar typespec vardecls -> prPrec i 0 (concatD [prt 0 typespec , prt 0 vardecls , doc (showString ";")])
   DVarf typespec vardecls -> prPrec i 0 (concatD [doc (showString "final") , prt 0 typespec , prt 0 vardecls , doc (showString ";")])


instance Print Modifier where
  prt i e = case e of
   Mabstract  -> prPrec i 0 (concatD [doc (showString "abstract")])
   Mfinal  -> prPrec i 0 (concatD [doc (showString "final")])
   Mpublic  -> prPrec i 0 (concatD [doc (showString "public")])
   Mprotected  -> prPrec i 0 (concatD [doc (showString "protected")])
   Mprivate  -> prPrec i 0 (concatD [doc (showString "private")])
   Mtransient  -> prPrec i 0 (concatD [doc (showString "transient")])
   Mvolatile  -> prPrec i 0 (concatD [doc (showString "volatile")])
   Mnative  -> prPrec i 0 (concatD [doc (showString "native")])
   Msync  -> prPrec i 0 (concatD [doc (showString "synchronized")])
   Mstatic  -> prPrec i 0 (concatD [doc (showString "static")])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print BasicType where
  prt i e = case e of
   Tchar  -> prPrec i 0 (concatD [doc (showString "char")])
   Tshort  -> prPrec i 0 (concatD [doc (showString "short")])
   Tint  -> prPrec i 0 (concatD [doc (showString "int")])
   Tlong  -> prPrec i 0 (concatD [doc (showString "long")])
   Tfloat  -> prPrec i 0 (concatD [doc (showString "float")])
   Tdouble  -> prPrec i 0 (concatD [doc (showString "double")])
   Tbyte  -> prPrec i 0 (concatD [doc (showString "byte")])
   Tboolean  -> prPrec i 0 (concatD [doc (showString "boolean")])


instance Print TypeSpec where
  prt i e = case e of
   ArrayType typename bracketsopts -> prPrec i 0 (concatD [prt 0 typename , prt 0 bracketsopts])
   TypeName typename -> prPrec i 0 (concatD [prt 0 typename])


instance Print TypeName where
  prt i e = case e of
   BuiltIn basictype -> prPrec i 0 (concatD [prt 0 basictype])
   ClassType ids -> prPrec i 0 (concatD [prt 0 ids])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print BracketsOpt where
  prt i e = case e of
   BracketsOpt  -> prPrec i 0 (concatD [doc (showString "[]")])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print Exp where
  prt i e = case e of
   Eassign exp0 assignment_op exp -> prPrec i 0 (concatD [prt 14 exp0 , prt 0 assignment_op , prt 0 exp])
   Etype exp typename -> prPrec i 0 (concatD [prt 14 exp , doc (showString "instanceof") , prt 0 typename])
   Econdition exp0 exp1 exp -> prPrec i 2 (concatD [prt 3 exp0 , doc (showString "?") , prt 0 exp1 , doc (showString ":") , prt 2 exp])
   Elor exp0 exp -> prPrec i 3 (concatD [prt 3 exp0 , doc (showString "||") , prt 4 exp])
   Eland exp0 exp -> prPrec i 4 (concatD [prt 4 exp0 , doc (showString "&&") , prt 5 exp])
   Ebitor exp0 exp -> prPrec i 5 (concatD [prt 5 exp0 , doc (showString "|") , prt 6 exp])
   Ebitexor exp0 exp -> prPrec i 6 (concatD [prt 6 exp0 , doc (showString "^") , prt 7 exp])
   Ebitand exp0 exp -> prPrec i 7 (concatD [prt 7 exp0 , doc (showString "&") , prt 8 exp])
   Eeq exp0 exp -> prPrec i 8 (concatD [prt 8 exp0 , doc (showString "==") , prt 9 exp])
   Eneq exp0 exp -> prPrec i 8 (concatD [prt 8 exp0 , doc (showString "!=") , prt 9 exp])
   Elthen exp0 exp -> prPrec i 9 (concatD [prt 9 exp0 , doc (showString "<") , prt 10 exp])
   Egrthen exp0 exp -> prPrec i 9 (concatD [prt 9 exp0 , doc (showString ">") , prt 10 exp])
   Ele exp0 exp -> prPrec i 9 (concatD [prt 9 exp0 , doc (showString "<=") , prt 10 exp])
   Ege exp0 exp -> prPrec i 9 (concatD [prt 9 exp0 , doc (showString ">=") , prt 10 exp])
   Eleft exp0 exp -> prPrec i 10 (concatD [prt 10 exp0 , doc (showString "<<") , prt 11 exp])
   Eright exp0 exp -> prPrec i 10 (concatD [prt 10 exp0 , doc (showString ">>") , prt 11 exp])
   Etrip exp0 exp -> prPrec i 10 (concatD [prt 10 exp0 , doc (showString ">>>") , prt 11 exp])
   Eplus exp0 exp -> prPrec i 11 (concatD [prt 11 exp0 , doc (showString "+") , prt 12 exp])
   Eminus exp0 exp -> prPrec i 11 (concatD [prt 11 exp0 , doc (showString "-") , prt 12 exp])
   Etimes exp0 exp -> prPrec i 12 (concatD [prt 12 exp0 , doc (showString "*") , prt 13 exp])
   Ediv exp0 exp -> prPrec i 12 (concatD [prt 12 exp0 , doc (showString "/") , prt 13 exp])
   Emod exp0 exp -> prPrec i 12 (concatD [prt 12 exp0 , doc (showString "%") , prt 13 exp])
   Ebcoercion basictype exp -> prPrec i 13 (concatD [doc (showString "(") , prt 0 basictype , doc (showString ")") , prt 13 exp])
   Eexpcoercion exp0 exp -> prPrec i 13 (concatD [doc (showString "(") , prt 0 exp0 , doc (showString ")") , prt 15 exp])
   Earrcoercion ids bracketsopts exp -> prPrec i 13 (concatD [doc (showString "(") , prt 0 ids , prt 0 bracketsopts , doc (showString ")") , prt 13 exp])
   Epreop unary_operator exp -> prPrec i 14 (concatD [prt 0 unary_operator , prt 13 exp])
   Epreinc exp -> prPrec i 14 (concatD [doc (showString "++") , prt 14 exp])
   Epredec exp -> prPrec i 14 (concatD [doc (showString "--") , prt 14 exp])
   Epostinc exp -> prPrec i 15 (concatD [prt 15 exp , doc (showString "++")])
   Epostdec exp -> prPrec i 15 (concatD [prt 15 exp , doc (showString "--")])
   Especname specname -> prPrec i 16 (concatD [prt 0 specname])
   Earr arracc -> prPrec i 16 (concatD [prt 0 arracc])
   Emth mthcall -> prPrec i 16 (concatD [prt 0 mthcall])
   Efld fieldacc -> prPrec i 16 (concatD [prt 0 fieldacc])
   Econst constant -> prPrec i 16 (concatD [prt 0 constant])
   Estring str -> prPrec i 16 (concatD [prt 0 str])
   Enewalloc newalloc -> prPrec i 17 (concatD [prt 0 newalloc])
   Evar ids -> prPrec i 18 (concatD [prt 0 ids])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print SpecName where
  prt i e = case e of
   SSsuper  -> prPrec i 0 (concatD [doc (showString "super")])
   SSthis  -> prPrec i 0 (concatD [doc (showString "this")])
   SSnull  -> prPrec i 0 (concatD [doc (showString "null")])


instance Print NewAlloc where
  prt i e = case e of
   Anewclass typename args -> prPrec i 0 (concatD [doc (showString "new") , prt 0 typename , prt 0 args])
   Anewinnerclass typename args fielddeclarations -> prPrec i 0 (concatD [doc (showString "new") , prt 0 typename , prt 0 args , doc (showString "{") , prt 0 fielddeclarations , doc (showString "}")])
   Anewarray typename dimexprs -> prPrec i 0 (concatD [doc (showString "new") , prt 0 typename , prt 0 dimexprs])
   Anewarriempty typename dimexprs -> prPrec i 0 (concatD [doc (showString "new") , prt 0 typename , prt 0 dimexprs , doc (showString "{") , doc (showString "}")])
   Anewarrinits typename dimexprs arrayinits -> prPrec i 0 (concatD [doc (showString "new") , prt 0 typename , prt 0 dimexprs , doc (showString "{") , prt 0 arrayinits , doc (showString "}")])


instance Print ArrAcc where
  prt i e = case e of
   Aarr ids exp -> prPrec i 0 (concatD [prt 0 ids , doc (showString "[") , prt 0 exp , doc (showString "]")])
   Aarr1 specexp exp -> prPrec i 0 (concatD [prt 0 specexp , doc (showString "[") , prt 0 exp , doc (showString "]")])


instance Print SpecExp where
  prt i e = case e of
   Cep exp -> prPrec i 0 (concatD [doc (showString "(") , prt 0 exp , doc (showString ")")])
   Cnp specexpnp -> prPrec i 0 (concatD [prt 0 specexpnp])
   Cthis specname -> prPrec i 0 (concatD [prt 0 specname])


instance Print SpecExpNP where
  prt i e = case e of
   CNLit constant -> prPrec i 0 (concatD [prt 0 constant])
   CNParr arracc -> prPrec i 0 (concatD [prt 0 arracc])
   CNPmth mthcall -> prPrec i 0 (concatD [prt 0 mthcall])
   CNPfld fieldacc -> prPrec i 0 (concatD [prt 0 fieldacc])


instance Print MthCall where
  prt i e = case e of
   Mmth ids args -> prPrec i 0 (concatD [prt 0 ids , prt 0 args])
   Mmth1 specexpnp args -> prPrec i 0 (concatD [prt 0 specexpnp , prt 0 args])
   Mmthspec specname args -> prPrec i 0 (concatD [prt 0 specname , prt 0 args])


instance Print FieldAcc where
  prt i e = case e of
   Ffvar specexp id -> prPrec i 0 (concatD [prt 0 specexp , doc (showString ".") , prt 0 id])
   Ffvar1 newalloc id -> prPrec i 0 (concatD [prt 0 newalloc , doc (showString ".") , prt 0 id])
   Ffthis ids -> prPrec i 0 (concatD [prt 0 ids , doc (showString ".this")])
   Fclass ids -> prPrec i 0 (concatD [prt 0 ids , doc (showString ".class")])
   Ffclass2 basictype -> prPrec i 0 (concatD [prt 0 basictype , doc (showString ".class")])


instance Print Args where
  prt i e = case e of
   Args exps -> prPrec i 0 (concatD [doc (showString "(") , prt 0 exps , doc (showString ")")])


instance Print DimExpr where
  prt i e = case e of
   DimExpr exp -> prPrec i 0 (concatD [doc (showString "[") , prt 0 exp , doc (showString "]")])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print Constant where
  prt i e = case e of
   Efloat d -> prPrec i 0 (concatD [prt 0 d])
   Echar jchar -> prPrec i 0 (concatD [prt 0 jchar])
   Eunicode unicodechar -> prPrec i 0 (concatD [prt 0 unicodechar])
   Eunsigned unsigned -> prPrec i 0 (concatD [prt 0 unsigned])
   Elong long -> prPrec i 0 (concatD [prt 0 long])
   Eunsignlong unsignedlong -> prPrec i 0 (concatD [prt 0 unsignedlong])
   Ehexadec hexadecimal -> prPrec i 0 (concatD [prt 0 hexadecimal])
   Ehexaunsign hexunsigned -> prPrec i 0 (concatD [prt 0 hexunsigned])
   Ehexalong hexlong -> prPrec i 0 (concatD [prt 0 hexlong])
   Ehexaunslong hexunslong -> prPrec i 0 (concatD [prt 0 hexunslong])
   Eoctal octal -> prPrec i 0 (concatD [prt 0 octal])
   Eoctalunsign octalunsigned -> prPrec i 0 (concatD [prt 0 octalunsigned])
   Eoctallong octallong -> prPrec i 0 (concatD [prt 0 octallong])
   Eoctalunslong octalunslong -> prPrec i 0 (concatD [prt 0 octalunslong])
   Ecdouble jdouble -> prPrec i 0 (concatD [prt 0 jdouble])
   Ecfloat jfloat -> prPrec i 0 (concatD [prt 0 jfloat])
   Eclongdouble jlongdouble -> prPrec i 0 (concatD [prt 0 jlongdouble])
   Eint n -> prPrec i 0 (concatD [prt 0 n])
   Etrue  -> prPrec i 0 (concatD [doc (showString "true")])
   Efalse  -> prPrec i 0 (concatD [doc (showString "false")])
   Elonger n -> prPrec i 0 (concatD [prt 0 n])
   Edouble d -> prPrec i 0 (concatD [prt 0 d])


instance Print Unary_operator where
  prt i e = case e of
   Plus  -> prPrec i 0 (concatD [doc (showString "+")])
   Negative  -> prPrec i 0 (concatD [doc (showString "-")])
   Complement  -> prPrec i 0 (concatD [doc (showString "~")])
   Logicalneg  -> prPrec i 0 (concatD [doc (showString "!")])


instance Print Assignment_op where
  prt i e = case e of
   Assign  -> prPrec i 0 (concatD [doc (showString "=")])
   AssignMul  -> prPrec i 0 (concatD [doc (showString "*=")])
   AssignDiv  -> prPrec i 0 (concatD [doc (showString "/=")])
   AssignMod  -> prPrec i 0 (concatD [doc (showString "%=")])
   AssignAdd  -> prPrec i 0 (concatD [doc (showString "+=")])
   AssignSub  -> prPrec i 0 (concatD [doc (showString "-=")])
   AssignLeft  -> prPrec i 0 (concatD [doc (showString "<<=")])
   AssignRight  -> prPrec i 0 (concatD [doc (showString ">>=")])
   AssignTrip  -> prPrec i 0 (concatD [doc (showString ">>>=")])
   AssignAnd  -> prPrec i 0 (concatD [doc (showString "&=")])
   AssignXor  -> prPrec i 0 (concatD [doc (showString "^=")])
   AssignOr  -> prPrec i 0 (concatD [doc (showString "|=")])


instance Print Semi where
  prt i e = case e of
   Sem1  -> prPrec i 0 (concatD [doc (showString ";")])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])


